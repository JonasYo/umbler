{"version":3,"sources":["../../../src/app/controllers/ScheduleController.js"],"names":["Op","Sequelize","ScheduleController","req","res","user_id","params","body","hour_id","service_id","date_start","date_end","startDate","Date","endDate","setHours","setMinutes","setMilliseconds","User","findByPk","user","status","json","message","code","Schedules","findAll","where","between","scheduling","length","create","schedules","Mail","sendMail","from","to","subject","template","defaultLayout","context","name","location","hour","professional","attachments","filename","path","process","cwd","cid","response","is_actived","is_realized","include","association","scheduled","finished","findOne","id","userId","role_id","or","date","setDate","getDate","attributes","oldName","email","oldPassword","ScheduleId","checkPassword","update"],"mappings":";;;;;;qjBAAA;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEQA,E,GAAOC,oB,CAAPD,E;;IAEFE,kB;;;;;;;;0FACSC,G,EAAKC,G;;;;;;;AACRC,uB,GAAYF,IAAIG,M,CAAhBD,O;4BAC8CF,IAAII,I,EAAlDC,O,aAAAA,O,EAASC,U,aAAAA,U,EAAYC,U,aAAAA,U,EAAYC,Q,aAAAA,Q;AAEnCC,yB,GAAY,IAAIC,IAAJ,CAASH,UAAT,C;AACZI,uB,GAAU,IAAID,IAAJ,CAASH,UAAT,C;;;AAEhBE,0BAAUG,QAAV,CAAmB,CAAnB;AACAH,0BAAUI,UAAV,CAAqB,CAArB;AACAJ,0BAAUK,eAAV,CAA0B,EAA1B;;AAEAH,wBAAQC,QAAR,CAAiB,EAAjB;AACAD,wBAAQE,UAAR,CAAmB,EAAnB;AACAF,wBAAQG,eAAR,CAAwB,EAAxB;;;uBAEmBC,eAAKC,QAAL,CAAcd,OAAd,C;;;AAAbe,oB;;oBAEDA,I;;;;;iDACIhB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,2BAAS,wBADiB;AAE1BC,wBAAM;AAFoB,iBAArB,C;;;;uBAMgBC,oBAAUC,OAAV,CAAkB;AACzCC,yBAAO;AACLlB,0CADK;AAELJ,oCAFK;AAGLK,oDACGV,GAAG4B,OADN,EACgB,CAAChB,SAAD,EAAYE,OAAZ,CADhB;AAHK;AADkC,iBAAlB,C;;;AAAnBe,0B;;sBAUFA,WAAWC,MAAX,GAAoB,C;;;;;iDACf1B,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,2BACE,+EAFwB;AAG1BC,wBAAM;AAHoB,iBAArB,C;;;;uBAOeC,oBAAUM,MAAV,CAAiB;AACvCvB,kCADuC;AAEvCC,wCAFuC;AAGvCJ,kCAHuC;AAIvCK,wCAJuC;AAKvCC;AALuC,iBAAjB,C;;;AAAlBqB,yB;;;AAQNC,+BAAKC,QAAL,CAAc;AACZC,wBAAM,kDADM;AAEZC,6CAFY;AAGZC,wEAHY;AAIZC,4BAAU,YAJE;AAKZC,iCAAe,YALH;AAMZC,2BAAS;AACPpB,+BAASA,KAAKqB,IADP;AAEPC,8BAAU,UAFH;AAGPC,+BAASjC,UAHF;AAIPkC,kCAAc;AAJP,mBANG;AAYZC,+BAAa,CACX;AACEC,8BAAU,WADZ;AAEEC,0BAASC,QAAQC,GAAR,EAAT,mCAFF;AAGEC,yBAAK;AAHP,mBADW;AAZD,iBAAd;;iDAqBO9C,IAAIkB,IAAJ,CAASU,SAAT,C;;;;;;;;;;;;;;;;;;;4FAGc7B,G,EAAKC,G;;;;;;AAC1B;AACQC,uB,GAAYF,IAAIG,M,CAAhBD,O;;uBAEWa,eAAKC,QAAL,CAAcd,OAAd,C;;;AAAbe,oB;;oBAEDA,I;;;;;kDACIhB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,2BAAS,wBADiB;AAE1BC,wBAAM;AAFoB,iBAArB,C;;;AAMH2B,wB,GAAW,E;;uBAEU1B,oBAAUC,OAAV,CAAkB;AAC3CC,yBAAO;AACLtB,oCADK;AAEL+C,gCAAY,CAFP;AAGLC,iCAAa;AAHR,mBADoC;AAM3CC,2BAAS,EAAEC,aAAa,UAAf;AANkC,iBAAlB,C;;;AAA3BJ,yBAASK,S;;uBASiB/B,oBAAUC,OAAV,CAAkB;AAC1CC,yBAAO;AACLtB,oCADK;AAEL+C,gCAAY,CAFP;AAGLC,iCAAa;AAHR,mBADmC;AAM1CC,2BAAS,EAAEC,aAAa,UAAf;AANiC,iBAAlB,C;;;AAA1BJ,yBAASM,Q;kDASFrD,IAAIkB,IAAJ,CAAS6B,QAAT,C;;;;;;;;;;;;;;;;;;;4FAGoBhD,G,EAAKC,G;;;;;;;uBACbc,eAAKwC,OAAL,CAAa;AAC9B/B,yBAAO;AACLgC,wBAAIxD,IAAIyD;AADH,mBADuB;AAI9BN,2BAAS,CACP;AACEC,iCAAa,WADf;AAEE5B,2BAAO;AACLtB,+BAASF,IAAIyD,MADR;AAELC,mDACG7D,GAAG8D,EADN,EACW,CAAC,CAAD,EAAI,CAAJ,CADX;AAFK;AAFT,mBADO;AAJqB,iBAAb,C;;;AAAb1C,oB;;oBAiBDA,I;;;;;kDACIhB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,2BAAS,qCADiB;AAE1BC,wBAAM;AAFoB,iBAArB,C;;;AAMDuC,oB,GAAS5D,IAAIG,M,CAAbyD,I;AACFnD,yB,GAAY,IAAIC,IAAJ,CAASkD,IAAT,C;AACZjD,uB,GAAU,IAAID,IAAJ,CAASkD,IAAT,C;;;AAEhBnD,0BAAUoD,OAAV,CAAkBpD,UAAUqD,OAAV,KAAsB,CAAxC;AACArD,0BAAUG,QAAV,CAAmB,CAAnB;AACAH,0BAAUI,UAAV,CAAqB,CAArB;;AAEAF,wBAAQkD,OAAR,CAAgBlD,QAAQmD,OAAR,KAAoB,CAApC;AACAnD,wBAAQC,QAAR,CAAiB,EAAjB;AACAD,wBAAQE,UAAR,CAAmB,EAAnB;AACAF,wBAAQG,eAAR,CAAwB,EAAxB;;;uBAEwBQ,oBAAUC,OAAV,CAAkB;AACxCC,yBAAO;AACLyB,gCAAY,CADP;AAELC,iCAAa,CAFR;AAGL3C,oDACGV,GAAG4B,OADN,EACgB,CAAChB,SAAD,EAAYE,OAAZ,CADhB;AAHK,mBADiC;AAQxCwC,2BAAS,CACP,EAAEC,aAAa,UAAf,EAA2BW,YAAY,CAAC,MAAD,EAAS,UAAT,CAAvC,EADO,EAEP,EAAEX,aAAa,MAAf,EAAuBW,YAAY,CAAC,MAAD,EAAS,OAAT,CAAnC,EAFO,EAGP,EAAEX,aAAa,MAAf,EAAuBW,YAAY,CAAC,MAAD,CAAnC,EAHO;AAR+B,iBAAlB,C;;;AAAlBlC,yB;kDAeC5B,IAAIkB,IAAJ,CAASU,SAAT,C;;;;;;;;;;;;;;;;;;;4FAGI7B,G,EAAKC,G;;;;;;;AAChB;6BAC8CD,IAAII,I,EAApC4D,O,cAAN1B,I,EAAe2B,K,cAAAA,K,EAAOC,W,cAAAA,W;;uBAExB5C,oBAAUN,QAAV,CAAmBhB,IAAImE,UAAvB,C;;;sBAEF,CAACF,KAAD,IAAU,CAACD,OAAX,IAAsBE,W;;;;;kDACjBjE,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,2BACE,uEAFwB;AAG1BC,wBAAM;AAHoB,iBAArB,C;;;+BAOL6C,W;;;;;;;;uBAAuB5C,oBAAU8C,aAAV,CAAwBF,WAAxB,C;;;;;;;;;;;kDAClBjE,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,2BAAS,kDADiB;AAE1BC,wBAAM;AAFoB,iBAArB,C;;;;uBAMHC,oBAAU+C,MAAV,CAAiBrE,IAAII,IAArB,C;;;;uBAEqBkB,oBAAUN,QAAV,CAAmBhB,IAAImE,UAAvB,C;;;;AAAnBX,kB,SAAAA,E;AAAIlB,oB,SAAAA,I;kDAELrC,IAAIkB,IAAJ,CAAS;AACdqC,wBADc;AAEdlB,4BAFc;AAGd2B;AAHc,iBAAT,C;;;;;;;;;;;;;;;;;;;;;kBAQI,IAAIlE,kBAAJ,E","file":"ScheduleController.js","sourcesContent":["/* eslint-disable camelcase */\r\nimport { Sequelize } from 'sequelize';\r\n\r\nimport Schedules from '../models/Schedules';\r\nimport User from '../models/User';\r\nimport Mail from '../../lib/Mail';\r\n\r\nconst { Op } = Sequelize;\r\n\r\nclass ScheduleController {\r\n  async create(req, res) {\r\n    const { user_id } = req.params;\r\n    const { hour_id, service_id, date_start, date_end } = req.body;\r\n\r\n    const startDate = new Date(date_start);\r\n    const endDate = new Date(date_start);\r\n\r\n    startDate.setHours(0);\r\n    startDate.setMinutes(0);\r\n    startDate.setMilliseconds(59);\r\n\r\n    endDate.setHours(23);\r\n    endDate.setMinutes(59);\r\n    endDate.setMilliseconds(59);\r\n\r\n    const user = await User.findByPk(user_id);\r\n\r\n    if (!user) {\r\n      return res.status(400).json({\r\n        message: 'Usuario não encontrado',\r\n        code: 'ERROR_BAD_REQUEST',\r\n      });\r\n    }\r\n\r\n    const scheduling = await Schedules.findAll({\r\n      where: {\r\n        service_id,\r\n        user_id,\r\n        date_start: {\r\n          [Op.between]: [startDate, endDate],\r\n        },\r\n      },\r\n    });\r\n\r\n    if (scheduling.length > 0) {\r\n      return res.status(400).json({\r\n        message:\r\n          'Parece que você já possui um agendamento para esse serviço na data escolhida.',\r\n        code: 'ERROR_BAD_REQUEST',\r\n      });\r\n    }\r\n\r\n    const schedules = await Schedules.create({\r\n      hour_id,\r\n      service_id,\r\n      user_id,\r\n      date_start,\r\n      date_end,\r\n    });\r\n\r\n    Mail.sendMail({\r\n      from: '\"Imaria Design\" <noreply@imariasobrancelhas.com>',\r\n      to: `kobig10775@7dmail.com`,\r\n      subject: `I'maria - Confirmação de agendamento`,\r\n      template: 'scheduling',\r\n      defaultLayout: 'scheduling',\r\n      context: {\r\n        user: `${user.name}`,\r\n        location: 'Curitiba',\r\n        hour: `${date_start}`,\r\n        professional: 'Maria Ruth',\r\n      },\r\n      attachments: [\r\n        {\r\n          filename: 'image.png',\r\n          path: `${process.cwd()}/src/resources/images/logo.png`,\r\n          cid: 'logo',\r\n        },\r\n      ],\r\n    });\r\n\r\n    return res.json(schedules);\r\n  }\r\n\r\n  async listUserSchedule(req, res) {\r\n    // eslint-disable-next-line camelcase\r\n    const { user_id } = req.params;\r\n\r\n    const user = await User.findByPk(user_id);\r\n\r\n    if (!user) {\r\n      return res.status(400).json({\r\n        message: 'Usuario não encontrado',\r\n        code: 'ERROR_BAD_REQUEST',\r\n      });\r\n    }\r\n\r\n    const response = {};\r\n\r\n    response.scheduled = await Schedules.findAll({\r\n      where: {\r\n        user_id,\r\n        is_actived: 1,\r\n        is_realized: 0,\r\n      },\r\n      include: { association: 'services' },\r\n    });\r\n\r\n    response.finished = await Schedules.findAll({\r\n      where: {\r\n        user_id,\r\n        is_actived: 1,\r\n        is_realized: 1,\r\n      },\r\n      include: { association: 'services' },\r\n    });\r\n\r\n    return res.json(response);\r\n  }\r\n\r\n  async listAccreditedSchedule(req, res) {\r\n    const user = await User.findOne({\r\n      where: {\r\n        id: req.userId,\r\n      },\r\n      include: [\r\n        {\r\n          association: 'userRoles',\r\n          where: {\r\n            user_id: req.userId,\r\n            role_id: {\r\n              [Op.or]: [2, 3],\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(400).json({\r\n        message: 'Usuario logado não possui permissão',\r\n        code: 'ERROR_BAD_REQUEST',\r\n      });\r\n    }\r\n\r\n    const { date } = req.params;\r\n    const startDate = new Date(date);\r\n    const endDate = new Date(date);\r\n\r\n    startDate.setDate(startDate.getDate() + 1);\r\n    startDate.setHours(0);\r\n    startDate.setMinutes(0);\r\n\r\n    endDate.setDate(endDate.getDate() + 1);\r\n    endDate.setHours(23);\r\n    endDate.setMinutes(59);\r\n    endDate.setMilliseconds(59);\r\n\r\n    const schedules = await Schedules.findAll({\r\n      where: {\r\n        is_actived: 1,\r\n        is_realized: 0,\r\n        date_start: {\r\n          [Op.between]: [startDate, endDate],\r\n        },\r\n      },\r\n      include: [\r\n        { association: 'services', attributes: ['name', 'duration'] },\r\n        { association: 'user', attributes: ['name', 'phone'] },\r\n        { association: 'hour', attributes: ['hour'] },\r\n      ],\r\n    });\r\n\r\n    return res.json(schedules);\r\n  }\r\n\r\n  async update(req, res) {\r\n    // TODO: refatorar atualização de agendamento\r\n    const { name: oldName, email, oldPassword } = req.body;\r\n\r\n    await Schedules.findByPk(req.ScheduleId);\r\n\r\n    if (!email || !oldName || oldPassword) {\r\n      return res.status(400).json({\r\n        message:\r\n          'Você não pode deixar os campos de nome, email ou senha antiga vazios.',\r\n        code: 'ERROR_BAD_REQUEST',\r\n      });\r\n    }\r\n\r\n    if (oldPassword && !(await Schedules.checkPassword(oldPassword))) {\r\n      return res.status(401).json({\r\n        message: 'A senha sua senha antiga parece estar incorreta.',\r\n        code: 'ERROR_BAD_REQUEST',\r\n      });\r\n    }\r\n\r\n    await Schedules.update(req.body);\r\n\r\n    const { id, name } = await Schedules.findByPk(req.ScheduleId);\r\n\r\n    return res.json({\r\n      id,\r\n      name,\r\n      email,\r\n    });\r\n  }\r\n}\r\n\r\nexport default new ScheduleController();\r\n"]}