{"version":3,"sources":["../../../src/app/controllers/AuthController.js"],"names":["AuthController","req","res","body","email","password","User","findOne","where","include","association","user","status","json","message","code","checkPassword","passwordMatch","id","name","phone","date_birth","createdAt","userRoles","expiresIn","authConfig","secret","token","jwt","sign","UserController","createAlternative","alias","Tokens","update","is_revoked","user_id","Math","random","toString","substring","create","type","Mail","sendMail","from","to","subject","template","context","attachments","filename","path","process","cwd","cid","confirmPassword","tokens","currentDate","Date","tokenDate","result","diffHrs","floor","findByPk","save"],"mappings":"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","file":"AuthController.js","sourcesContent":["/* eslint-disable camelcase */\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport authConfig from '../../config/auth';\r\nimport Mail from '../../lib/Mail';\r\n\r\nimport User from '../models/User';\r\n\r\nimport Tokens from '../models/Tokens';\r\nimport UserController from './UserController';\r\n\r\nclass AuthController {\r\n  async singin(req, res) {\r\n    const { email, password } = req.body;\r\n\r\n    const user = await User.findOne({\r\n      where: { email },\r\n      include: { association: 'userRoles' },\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(401).json({\r\n        message: `Usuário com email ${email} não foi encontrado.`,\r\n        code: 'ERROR_USER_NOT_FOUND',\r\n      });\r\n    }\r\n\r\n    const passwordMatch = await user.checkPassword(password);\r\n\r\n    if (!passwordMatch) {\r\n      return res.status(401).json({\r\n        message: 'Senha incorreta, tente novamente.',\r\n        code: 'ERROR_UNATHORIZED',\r\n      });\r\n    }\r\n\r\n    const { id, name, phone, date_birth, createdAt, userRoles } = user;\r\n\r\n    const { expiresIn, secret } = authConfig;\r\n\r\n    return res.json({\r\n      user: {\r\n        id,\r\n        name,\r\n        email,\r\n        phone,\r\n        date_birth,\r\n        createdAt,\r\n        userRoles,\r\n      },\r\n      token: jwt.sign({ id }, secret, {\r\n        expiresIn,\r\n      }),\r\n    });\r\n  }\r\n\r\n  async singinAlternative(req, res) {\r\n    const user = await UserController.createAlternative(req);\r\n\r\n    if (!user) {\r\n      return res.status(401).json({\r\n        message: `Não foi possivel realizar o login com ${req.body.alias}.`,\r\n        code: 'ERROR_LOGIN_ALIAS',\r\n      });\r\n    }\r\n\r\n    const { id, name, email, phone, date_birth, createdAt, userRoles } = user;\r\n\r\n    const { expiresIn, secret } = authConfig;\r\n\r\n    return res.json({\r\n      user: {\r\n        id,\r\n        name,\r\n        email,\r\n        phone,\r\n        date_birth,\r\n        createdAt,\r\n        userRoles,\r\n      },\r\n      token: jwt.sign({ id }, secret, {\r\n        expiresIn,\r\n      }),\r\n    });\r\n  }\r\n\r\n  async forgot(req, res) {\r\n    const { email } = req.body;\r\n\r\n    const user = await User.findOne({\r\n      where: { email },\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(401).json({\r\n        message: `Usuário com email ${email} não foi encontrado.`,\r\n        code: 'ERROR_USER_NOT_FOUND',\r\n      });\r\n    }\r\n\r\n    const { id } = user;\r\n\r\n    await Tokens.update(\r\n      {\r\n        is_revoked: 1,\r\n      },\r\n      {\r\n        where: {\r\n          user_id: user.id,\r\n          is_revoked: 0,\r\n        },\r\n      }\r\n    );\r\n\r\n    const token = Math.random()\r\n      .toString(36)\r\n      .substring(4);\r\n\r\n    await Tokens.create({\r\n      user_id: id,\r\n      token,\r\n      type: 'forgotPassword',\r\n    });\r\n\r\n    Mail.sendMail({\r\n      from: '\"Imaria Design\" <noreply@imariasobrancelhas.com>',\r\n      to: `${email}`,\r\n      subject: `I'maria - Recuperação de senha`,\r\n      template: 'forgotPassword',\r\n      context: {\r\n        user: `${user.name}`,\r\n        token: `${token}`,\r\n      },\r\n      attachments: [\r\n        {\r\n          filename: 'image.png',\r\n          path: `${process.cwd()}/src/resources/images/logo.png`,\r\n          cid: 'logo',\r\n        },\r\n      ],\r\n    });\r\n\r\n    return res.json('Sucesso no envio do token');\r\n  }\r\n\r\n  async reset(req, res) {\r\n    const { token, password, confirmPassword } = req.body;\r\n\r\n    const tokens = await Tokens.findOne({\r\n      where: {\r\n        token,\r\n      },\r\n    });\r\n\r\n    if (!tokens) {\r\n      return res.status(401).json({\r\n        message: `Token informado é inválido.`,\r\n        code: 'ERROR_TOKEN_NOT_FOUND',\r\n      });\r\n    }\r\n\r\n    const currentDate = new Date();\r\n    const tokenDate = new Date(tokens.createdAt);\r\n    const result = currentDate - tokenDate;\r\n    const diffHrs = Math.floor((result % 86400000) / 3600000);\r\n\r\n    if (diffHrs > 1) {\r\n      return res.status(401).json({\r\n        message: `Token expirado, tente novamente.`,\r\n        code: 'ERROR_PASSWORDS_NOT_EQUALS',\r\n      });\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return res.status(401).json({\r\n        message: `As senhas não são iguais.`,\r\n        code: 'ERROR_PASSWORDS_NOT_EQUALS',\r\n      });\r\n    }\r\n\r\n    const user = await User.findByPk(tokens.user_id);\r\n\r\n    user.password = password;\r\n\r\n    user.save();\r\n\r\n    return res.json('Recuperação de senha realizado com sucesso.');\r\n  }\r\n}\r\n\r\nexport default new AuthController();\r\n"]}