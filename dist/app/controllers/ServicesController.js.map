{"version":3,"sources":["../../../src/app/controllers/ServicesController.js"],"names":["Op","Sequelize","ServicesController","req","res","Services","create","body","response","json","findAll","status","message","code","params","date","service_id","startDate","Date","endDate","setDate","getDate","setHours","setMinutes","setMilliseconds","Schedules","attributes","where","date_start","between","schedule","hourNotAvailable","map","push","hour","hour_id","Times","id","notIn","update"],"mappings":";;;;;;qjBAAA;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEQA,E,GAAOC,oB,CAAPD,E;;IAEFE,kB;;;;;;;;0FACSC,G,EAAKC,G;;;;;;;uBAEOC,mBAASC,MAAT,CAAgBH,IAAII,IAApB,C;;;AAAjBC,wB;iDAECJ,IAAIK,IAAJ,CAASD,QAAT,C;;;;;;;;;;;;;;;;;;;4FAGmBL,G,EAAKC,G;;;;;;;uBACRC,mBAASK,OAAT,E;;;AAAjBF,wB;;oBACDA,Q;;;;;kDACIJ,IAAIO,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAC1BG,2BAAS,yCADiB;AAE1BC,wBAAM;AAFoB,iBAArB,C;;;kDAKFT,IAAIK,IAAJ,CAASD,QAAT,C;;;;;;;;;;;;;;;;;;;4FAGgBL,G,EAAKC,G;;;;;;;8BACCD,IAAIW,M,EAAzBC,I,eAAAA,I,EAAMC,U,eAAAA,U;AACRC,yB,GAAY,IAAIC,IAAJ,CAASH,IAAT,C;AACZI,uB,GAAU,IAAID,IAAJ,CAASH,IAAT,C;;;AAEhBE,0BAAUG,OAAV,CAAkBH,UAAUI,OAAV,KAAsB,CAAxC;AACAJ,0BAAUK,QAAV,CAAmB,CAAnB;AACAL,0BAAUM,UAAV,CAAqB,CAArB;;AAEAJ,wBAAQC,OAAR,CAAgBD,QAAQE,OAAR,KAAoB,CAApC;AACAF,wBAAQG,QAAR,CAAiB,EAAjB;AACAH,wBAAQI,UAAR,CAAmB,EAAnB;AACAJ,wBAAQK,eAAR,CAAwB,EAAxB;;;uBAEuBC,oBAAUf,OAAV,CAAkB;AACvC;AACAgB,8BAAY,CAAC,SAAD,CAF2B;AAGvCC,yBAAO;AACLX,0CADK;AAELY,oDACG5B,GAAG6B,OADN,EACgB,CAACZ,SAAD,EAAYE,OAAZ,CADhB;AAFK;AAHgC,iBAAlB,C;;;AAAjBW,wB;AAWAC,gC,GAAmB,E;;AACzBD,yBAASE,GAAT,CAAa;AAAA,yBAAQD,iBAAiBE,IAAjB,CAAsBC,KAAKC,OAA3B,CAAR;AAAA,iBAAb;;;uBAEuBC,gBAAM1B,OAAN,CAAc;AACnCiB,yBAAO;AACLU,4CAAOrC,GAAGsC,KAAV,EAAkBP,gBAAlB;AADK;AAD4B,iBAAd,C;;;AAAjBvB,wB;;oBAMDA,Q;;;;;kDACIJ,IAAIO,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAC1BG,2BAAS,yCADiB;AAE1BC,wBAAM;AAFoB,iBAArB,C;;;kDAMFT,IAAIK,IAAJ,CAASD,QAAT,C;;;;;;;;;;;;;;;;;AAGT;;;;;4FACaL,G,EAAKC,G;;;;;;;uBACOC,mBAASkC,MAAT,CAAgBpC,IAAII,IAApB,C;;;AAAjBC,wB;kDAECJ,IAAIK,IAAJ,CAAS;AACdD;AADc,iBAAT,C;;;;;;;;;;;;;;;;;;;4FAKIL,G,EAAKC,G;;;;;;;uBACOC,mBAASK,OAAT,E;;;AAAjBF,wB;kDAECJ,IAAIK,IAAJ,CAAS;AACdD;AADc,iBAAT,C;;;;;;;;;;;;;;;;;;;;;kBAMI,IAAIN,kBAAJ,E","file":"ServicesController.js","sourcesContent":["/* eslint-disable camelcase */\r\nimport { Sequelize } from 'sequelize';\r\n\r\nimport Services from '../models/Services';\r\nimport Times from '../models/Times';\r\nimport Schedules from '../models/Schedules';\r\n\r\nconst { Op } = Sequelize;\r\n\r\nclass ServicesController {\r\n  async create(req, res) {\r\n    // TODO: finalizar logica para consumir a API no Portal Web\r\n    const response = await Services.create(req.body);\r\n\r\n    return res.json(response);\r\n  }\r\n\r\n  async listServicesAvailable(req, res) {\r\n    const response = await Services.findAll();\r\n    if (!response) {\r\n      return res.status(400).json({\r\n        message: 'Não há serviços disponiveis no momento.',\r\n        code: 'ERROR_BAD_REQUEST',\r\n      });\r\n    }\r\n    return res.json(response);\r\n  }\r\n\r\n  async listHoursAvailable(req, res) {\r\n    const { date, service_id } = req.params;\r\n    const startDate = new Date(date);\r\n    const endDate = new Date(date);\r\n\r\n    startDate.setDate(startDate.getDate() + 1);\r\n    startDate.setHours(0);\r\n    startDate.setMinutes(0);\r\n\r\n    endDate.setDate(endDate.getDate() + 1);\r\n    endDate.setHours(23);\r\n    endDate.setMinutes(59);\r\n    endDate.setMilliseconds(59);\r\n\r\n    const schedule = await Schedules.findAll({\r\n      // eslint-disable-next-line camelcase\r\n      attributes: ['hour_id'],\r\n      where: {\r\n        service_id,\r\n        date_start: {\r\n          [Op.between]: [startDate, endDate],\r\n        },\r\n      },\r\n    });\r\n\r\n    const hourNotAvailable = [];\r\n    schedule.map(hour => hourNotAvailable.push(hour.hour_id));\r\n\r\n    const response = await Times.findAll({\r\n      where: {\r\n        id: { [Op.notIn]: hourNotAvailable },\r\n      },\r\n    });\r\n\r\n    if (!response) {\r\n      return res.status(400).json({\r\n        message: 'Não há serviços disponiveis no momento.',\r\n        code: 'ERROR_BAD_REQUEST',\r\n      });\r\n    }\r\n\r\n    return res.json(response);\r\n  }\r\n\r\n  // TODO: finalizar metodos Update e Delete\r\n  async update(req, res) {\r\n    const response = await Services.update(req.body);\r\n\r\n    return res.json({\r\n      response,\r\n    });\r\n  }\r\n\r\n  async delete(req, res) {\r\n    const response = await Services.findAll();\r\n\r\n    return res.json({\r\n      response,\r\n    });\r\n  }\r\n}\r\n\r\nexport default new ServicesController();\r\n"]}