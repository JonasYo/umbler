{"version":3,"sources":["../../../src/app/models/User.js"],"names":["User","password","bcrypt","compare","password_hash","res","sequelize","name","DataTypes","STRING","email","date_birth","phone","INTEGER","VIRTUAL","role_id","alias","is_actived","TINYINT","addHook","user","hash","models","hasMany","Schedules","foreignKey","as","UserRole","Tokens","Device","Model"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;IAEMA,I;;;;;;;;;;;;0FA8BgBC,Q;;;;;;;uBACAC,mBAAOC,OAAP,CAAeF,QAAf,EAAyB,KAAKG,aAA9B,C;;;AAAZC,mB;iDACCA,G;;;;;;;;;;;;;;;;;;yBA/BGC,S,EAAW;AAAA;;AACrB,mFACE;AACEC,cAAMC,qBAAUC,MADlB;AAEEC,eAAOF,qBAAUC,MAFnB;AAGEE,oBAAYH,qBAAUC,MAHxB;AAIEG,eAAOJ,qBAAUK,OAJnB;AAKEZ,kBAAUO,qBAAUM,OALtB;AAMEC,iBAASP,qBAAUM,OANrB;AAOEV,uBAAeI,qBAAUC,MAP3B;AAQEO,eAAOR,qBAAUC,MARnB;AASEQ,oBAAYT,qBAAUU;AATxB,OADF,EAYE;AACEZ;AADF,OAZF;;AAiBA,WAAKa,OAAL,CAAa,YAAb;AAAA,4EAA2B,kBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBnB,0BADiB,GACJmB,IADI,CACjBnB,QADiB;;AAAA,uBAGrBA,QAHqB;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAIIC,mBAAOmB,IAAP,CAAYpB,QAAZ,EAAsB,CAAtB,CAJJ;;AAAA;AAIvBmB,uBAAKhB,aAJkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA3B;;AAAA;AAAA;AAAA;AAAA;;AAQA,aAAO,IAAP;AACD;;;8BAOgBkB,M,EAAQ;AACvB,WAAKC,OAAL,CAAaD,OAAOE,SAApB,EAA+B,EAAEC,YAAY,SAAd,EAAyBC,IAAI,WAA7B,EAA/B;AACA,WAAKH,OAAL,CAAaD,OAAOK,QAApB,EAA8B;AAC5BF,oBAAY,SADgB;AAE5BC,YAAI;AAFwB,OAA9B;AAIA,WAAKH,OAAL,CAAaD,OAAOM,MAApB,EAA4B;AAC1BH,oBAAY,SADc;AAE1BC,YAAI;AAFsB,OAA5B;AAIA,WAAKH,OAAL,CAAaD,OAAOO,MAApB,EAA4B;AAC1BJ,oBAAY,SADc;AAE1BC,YAAI;AAFsB,OAA5B;AAID;;;;EAjDgBI,gB;;kBAoDJ9B,I","file":"User.js","sourcesContent":["import { Model, DataTypes } from 'sequelize';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nclass User extends Model {\r\n  static init(sequelize) {\r\n    super.init(\r\n      {\r\n        name: DataTypes.STRING,\r\n        email: DataTypes.STRING,\r\n        date_birth: DataTypes.STRING,\r\n        phone: DataTypes.INTEGER,\r\n        password: DataTypes.VIRTUAL,\r\n        role_id: DataTypes.VIRTUAL,\r\n        password_hash: DataTypes.STRING,\r\n        alias: DataTypes.STRING,\r\n        is_actived: DataTypes.TINYINT,\r\n      },\r\n      {\r\n        sequelize,\r\n      }\r\n    );\r\n\r\n    this.addHook('beforeSave', async user => {\r\n      const { password } = user;\r\n\r\n      if (password) {\r\n        user.password_hash = await bcrypt.hash(password, 8);\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  async checkPassword(password) {\r\n    const res = await bcrypt.compare(password, this.password_hash);\r\n    return res;\r\n  }\r\n\r\n  static associate(models) {\r\n    this.hasMany(models.Schedules, { foreignKey: 'user_id', as: 'schedules' });\r\n    this.hasMany(models.UserRole, {\r\n      foreignKey: 'user_id',\r\n      as: 'userRoles',\r\n    });\r\n    this.hasMany(models.Tokens, {\r\n      foreignKey: 'user_id',\r\n      as: 'userTokens',\r\n    });\r\n    this.hasMany(models.Device, {\r\n      foreignKey: 'user_id',\r\n      as: 'userDevice',\r\n    });\r\n  }\r\n}\r\n\r\nexport default User;\r\n"]}